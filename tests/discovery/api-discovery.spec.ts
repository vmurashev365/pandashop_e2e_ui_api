import { test, expect } from "@playwright/test";

/**
 * API Discovery Test Suite
 * –ò—Å—Å–ª–µ–¥—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API Pandashop.md
 */
test.describe("API Discovery", () => {
  const baseUrl = "https://pandashop.md";
  
  test("explore main page and find API endpoints", async ({ page }) => {
    console.log("üîç Exploring Pandashop.md structure...");
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto(baseUrl);
    await expect(page).toHaveTitle(/.*PandaShop.*/i);
    
    console.log("‚úÖ Main page loaded successfully");
    
    // –ò—â–µ–º AJAX –∑–∞–ø—Ä–æ—Å—ã –∏ API –≤—ã–∑–æ–≤—ã
    const apiCalls: string[] = [];
    
    page.on("request", (request) => {
      const url = request.url();
      if (url.includes("api") || url.includes("json") || url.includes("ajax")) {
        apiCalls.push(url);
        console.log("üåê API Call detected:", url);
      }
    });
    
    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
    await page.waitForTimeout(2000);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
    const catalogLinks = await page.locator('a[href*="catalog"], a[href*="produc"], a[href*="shop"]').all();
    
    if (catalogLinks.length > 0) {
      console.log(`üì¶ Found ${catalogLinks.length} potential catalog links`);
      
      for (let i = 0; i < Math.min(catalogLinks.length, 3); i++) {
        try {
          const href = await catalogLinks[i].getAttribute("href");
          console.log(`üîó Catalog link ${i + 1}: ${href}`);
          
          if (href) {
            await catalogLinks[i].click();
            await page.waitForTimeout(1000);
            break;
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è Could not click catalog link ${i + 1}`);
        }
      }
    }
    
    // –ò—â–µ–º —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
    const searchInputs = await page.locator('input[type="search"], input[placeholder*="search"], input[placeholder*="–ø–æ–∏—Å–∫"]').all();
    
    if (searchInputs.length > 0) {
      console.log(`üîç Found ${searchInputs.length} search inputs`);
      
      try {
        await searchInputs[0].fill("test");
        await searchInputs[0].press("Enter");
        await page.waitForTimeout(2000);
        console.log("‚úÖ Search executed");
      } catch (error) {
        console.log("‚ö†Ô∏è Could not execute search");
      }
    }
    
    // –ñ–¥–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ API –≤—ã–∑–æ–≤—ã
    await page.waitForTimeout(3000);
    
    console.log("\nüìä API Discovery Results:");
    console.log(`üåê Total API calls detected: ${apiCalls.length}`);
    
    if (apiCalls.length > 0) {
      console.log("\nüîó Detected API endpoints:");
      apiCalls.forEach((url, index) => {
        console.log(`  ${index + 1}. ${url}`);
      });
    } else {
      console.log("‚ùå No obvious API endpoints detected");
      console.log("üí° This might be a server-rendered site without AJAX APIs");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ
    const content = await page.content();
    const jsonMatches = content.match(/\{[^{}]*"[^"]*":[^{}]*\}/g);
    
    if (jsonMatches && jsonMatches.length > 0) {
      console.log(`\nüìã Found ${jsonMatches.length} JSON-like structures in page source`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
      jsonMatches.slice(0, 3).forEach((json, index) => {
        if (json.length < 200) {
          console.log(`  ${index + 1}. ${json}`);
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è e-commerce —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    const commonEndpoints = [
      "/api/products",
      "/api/catalog", 
      "/api/search",
      "/products.json",
      "/catalog.json",
      "/api/v1/products",
      "/ajax/products",
      "/wp-json/wp/v2/product", // WordPress WooCommerce
    ];
    
    console.log("\nüîç Testing common e-commerce endpoints:");
    
    for (const endpoint of commonEndpoints) {
      try {
        const response = await page.request.get(`${baseUrl}${endpoint}`);
        const status = response.status();
        
        if (status === 200) {
          console.log(`‚úÖ ${endpoint} - Status: ${status} (FOUND!)`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç JSON
          const contentType = response.headers()["content-type"];
          if (contentType && contentType.includes("json")) {
            const data = await response.json();
            console.log(`üìÑ Content sample:`, JSON.stringify(data).substring(0, 100) + "...");
          }
        } else if (status === 404) {
          console.log(`‚ùå ${endpoint} - Status: ${status} (Not Found)`);
        } else {
          console.log(`‚ö†Ô∏è ${endpoint} - Status: ${status}`);
        }
      } catch (error) {
        console.log(`üí• ${endpoint} - Error: ${error.message}`);
      }
    }
    
    expect(true).toBe(true); // –¢–µ—Å—Ç –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –æ–Ω –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
  });
  
  test("check robots.txt and sitemap for API hints", async ({ page }) => {
    console.log("\nü§ñ Checking robots.txt for API hints...");
    
    try {
      await page.goto(`${baseUrl}/robots.txt`);
      const content = await page.textContent("body");
      
      if (content) {
        console.log("üìÑ robots.txt content:");
        console.log(content);
        
        // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è API
        if (content.includes("api")) {
          console.log("‚úÖ Found API references in robots.txt");
        }
      }
    } catch (error) {
      console.log("‚ùå Could not fetch robots.txt");
    }
    
    console.log("\nüó∫Ô∏è Checking sitemap for API hints...");
    
    const sitemapUrls = [
      "/sitemap.xml",
      "/sitemap_index.xml", 
      "/wp-sitemap.xml"
    ];
    
    for (const sitemapUrl of sitemapUrls) {
      try {
        await page.goto(`${baseUrl}${sitemapUrl}`);
        const content = await page.textContent("body");
        
        if (content && content.includes("<url")) {
          console.log(`‚úÖ Found sitemap at: ${sitemapUrl}`);
          
          // –ò—â–µ–º API-–ø–æ–¥–æ–±–Ω—ã–µ URLs
          const apiUrls = content.match(/https?:\/\/[^<]*api[^<]*/gi);
          if (apiUrls) {
            console.log("üîó API-like URLs in sitemap:");
            apiUrls.slice(0, 5).forEach(url => console.log(`  - ${url}`));
          }
          break;
        }
      } catch (error) {
        console.log(`‚ùå Could not fetch ${sitemapUrl}`);
      }
    }
    
    expect(true).toBe(true);
  });
});
